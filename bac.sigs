admin.alias : endpoint, alias
admin.aliasChain : chain, alias 
admin.lockProfile
admin.startCPUProfiler
admin.stopCPUProfiler
auth.newToken : password, endpoints []
auth.revokeToken : password, token 
auth.changePassword : oldPassword, newPassword 
avm.buildGenesis : genesisDataJSON
avm.createAddress : username, password 
avm.createFixedCapAsset : name, symbol, denomination, initialHolders []{ address, amount}, from [], (opt) changeAddr, (opt) username, password 
avm.mint : amount, assetID, to, from [], (opt) changeAddr, (opt) username, password 
avm.createVariableCapAsset : name, symbol, denomination, minterSets []{ minters [], threshold}, from [], (opt) changeAddr, (opt) username, password 
avm.createNFTAsset : name, symbol, minterSets []{ minters [], threshold}, from [], (opt) changeAddr, (opt) username, password }
avm.mintNFT : assetID, payload, to, from [], (opt) changeAddr, (opt) username, password 
avm.exportAVAX : to, amount, from [], (opt) changeAddr, (opt) username, password, 
avm.exportKey : username, password, address 
avm.getAllBalances : address
avm.getAssetDescription : assetID 
avm.getBalance : address, assetID 
avm.getTx : txID 
avm.getTxStatus : txID 
avm.getUTXOs : addresses, limit, (opt) startIndex { (opt) address, utxo }, sourceChain (opt) },
avm.importAVAX : to, sourceChain, username, password, 
avm.importKey : username, password, privateKey 
avm.issueTx : tx 
avm.listAddresses : username, password 
avm.Send : amount, assetID, to, from [], (opt) changeAddr, (opt) memo, (opt) username, password 
avm.sendNFT : assetID, groupID, to, from [], (opt) changeAddr, (opt) username, password 
health.getLiveness
info.getBlockchainID : alias
info.getNetworkID
info.getNetworkName
info.getNodeID
info.getNodeVersion
info.isBootstrapped : chain
info.peers
info.getTxFee
ipcs.publishBlockchain : blockchainID 
ipcs.unpublishBlockchain : blockchainID 
keystore.createUser : username, password 
keystore.ListUsers
platform.addDelegator : nodeID, startTime, endTime, stakeAmount, rewardAddress, from [], (opt) changeAddr, (opt) username, password 
platform.addValidator : nodeID, startTime, endTime, stakeAmount, rewardAddress, from [], (opt) changeAddr, (opt) delegationFeeRate float, username, password 
platform.addSubnetValidator : nodeID, subnetID, startTime, endTime, weight, from [], (opt) changeAddr, (opt) username, password 
platform.createAddress : username, password 
platform.createBlockchain : subnetID, vmID, name, genesisData, from [], (opt) changeAddr, (opt) username, password 
platform.createSubnet : controlKeys [], threshold, from [], (opt) changeAddr, (opt) username, password 
platform.exportAVAX : amount, from [], (opt) to, changeAddr, (opt) username, password 
platform.exportKey : username, password, address 
platform.getBalance : address 
platform.getBlockchains
platform.getBlockchainStatus : blockchainID 
platform.getCurrentValidators : subnetID 
platform.getHeight
platform.getMinStake
platform.getPendingValidators : subnetID 
platform.getStakingAssetID
platform.getSubnets : ids []string
platform.getStake : addresses []string
platform.getTx : txID 
platform.getTxStatus : txID 
platform.getUTXOs : addresses, limit, (opt) startIndex { (opt) address, utxo }, sourceChain (opt) },
platform.importAVAX : from [], (opt) to, changeAddr, (opt) sourceChain, username, password 
platform.importKey : username, password, privateKey 
platform.listAddresses : username, password 
platform.sampleValidators : size, subnetID 
platform.validatedBy : blockchainID 
platform.validates : subnetID 
timestamp.getBlock : id 
timestamp.proposeBlock : data 
