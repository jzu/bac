#!/bin/bash

# bac - Basic Avalanche CLI
# (C) 2020 Jean Zundel <jzu@free.fr> - MIT License
# See https://github.com/jzu/bac
#
# Bash wrapper around the Avalanche JSON API

export LANG=C
export LC_ALL=C

URI="127.0.0.1:9650"

if [ $# -eq 0 ] 
then
  echo "Usage: bac [-f] [-n] service.method [key:value ...]"
  echo "       bac [-h]"
  exit 1
fi

if [ $1 = -h ]
then
  echo 'bac - Basic Avalanche CLI'
  echo
  echo "Usage: bac [-h] [-f] service.method [key:value ...]"
  echo
  echo '-f formats the output using jq.'
  echo '-n does nothing but display the Curl command.'
  echo 'Arguments are key:value pairs (quotes unnecessary).'
  echo 'Use spaces between pairs.'
  echo 'Objects and arrays are delimited by {} and [], respectively.'
  echo 'BACPWD instead of password:... looks up the password in ~/.bacpwd'
  echo 'Endpoint is inferred from the service part of the method.'
  echo
  echo 'Example: '
  echo 'bac -f avm.getBalance address:X-avax1tmnpf87ph0pap4p507zfr0zesafnj5qh0sdkjc assetID:AVAX'
  echo
  echo 'Providing an incomplete method name (i.e. without . or _) has it grepped'
  echo 'in [/usr/local/etc/]bac.sigs and matching method signatures are displayed.'
  echo
  exit 0
fi

# Formatting

FORMAT="cat"
if [ $1 = "-f" ]
then
  if which jq >/dev/null
  then
    FORMAT="jq . -"
  else
    echo 'Please install the jq package (apt install jq)' 1>&2
  fi
  shift
fi

# Do nothing?

if [ $1 = "-n" ]
then
  ECHO="echo "
  shift
fi

# Looking for signatures

[ -f /usr/local/etc/bac.sigs ] && \
  SIGS=/usr/local/etc/bac.sigs

[ -f bac.sigs ] && \
  SIGS=bac.sigs

if ! echo $* | egrep -q '\.|_'
then
  [ -z "$SIGS" ] && \
    exit 2
  grep -i "$1" "$SIGS"
  exit 0
fi

# Endpoint

METHOD=$1
ENDPOINT=`echo $METHOD \
          | sed -e 's/\..*//' \
                -e 's:avm:bc/X:' \
                -e 's:platform:bc/P:' \
                -e 's:[^/]*_.*:bc/C/rpc:' \
                -e 's:timestamp:bc/timestamp:'`
shift

# URI and P12 for remote access (https://github.com/jzu/ara)
# bacara.conf is located in the $HOME/.config of the user who sudo'd

P_ID=$$
PP_ID=`grep PPid: /proc/$P_ID/status \
      | sed 's/.*\t//'`
GP_ID=`grep PPid: /proc/$PP_ID/status \
      | sed 's/.*\t//'`
CFG=/home/`ps -o user -p $GP_ID \
           | tail -1`/.config/bacara.conf
if [ -f "$CFG" ]
then
  URI=`cat $CFG \
       | grep URI \
       | sed 's/.*=//'`
  P12=`cat $CFG \
       | grep P12 \
       | sed 's/.*=//'`
fi

# Params

if echo $* | grep -q :                     # Standard API
then
  PARAMS=`echo $* \
          | sed -e 's/:/":"/g' \
                -e 's/^/,"params":{"/' \
                -e 's/ /","/g' \
                -e 's/$/"}/' \
                -e 's/\([^"]\)$/\1"/' \
                -e 's/"\([{\[][{\[]*\)/\1"/g' \
                -e 's/\(\]\]*\)"/"\1/g' \
                -e 's/\(}}*\)"/"\1/g' \
                -e 's/"\([{\[][{\[]*\)/\1"/g' \
                -e 's/\(\]\]*\)"/"\1/g' \
                -e 's/\(}}*\)"/"\1/g' \
                -e 's/},*{/"},{"/g' \
                -e 's/""*/"/g'
         `
else                                       # C-chain: array, not object
  if echo $METHOD | grep -q '_'
  then
    [ ! -z "$*" ] && \
      PARAMS=`echo $* \
              | sed -e 's/^/,"params":["/' \
                    -e 's/ /","/g' \
                    -e 's/$/"]/' \
           `
  fi
fi

# Password handling

if echo $* | grep -q BACPWD 
then
  if [ -f ~/.bacpwd ] 
  then
    if [ `stat -c %a%U ~/.bacpwd` = 400$USER ]
    then
      USERNAME=`echo "$PARAMS" \
                | sed -e 's/.*username":"//' \
                      -e 's/".*//'`
      if [ -z "$USERNAME" ] 
      then
        echo No username provided
        exit 3
      fi
      PASSWORD=`grep -w $USERNAME ~/.bacpwd \
                | sed -e 's/^ *\(.*\) *$/\1/' \
                      -e 's/.*  *//'`
      if [ -z "$PASSWORD" ]
      then
        echo No password for $USERNAME in ~/.bacpwd
        exit 4
      fi
      PARAMS=`echo "$PARAMS" \
              | sed "s/BACPWD/password\":\"$PASSWORD/"`
    else
      echo "~/.bacpwd should belong to $USER with permissions set to 400"
      exit 5
    fi
  else
    echo No ~/.bacpwd file for BACPWD
    exit 6
  fi
fi

PARAMS=`echo $PARAMS | \
        sed -e 's/"params":/\n       "params" : /'`  # Coquetry

# Faster, Pussycat! Kill! Kill!

${ECHO}curl --data \
            '{"jsonrpc": "2.0", "id": 1, "method": "'$METHOD'"'"$PARAMS"'}' \
            -H 'content-type:application/json;' 2>/dev/null \
            $P12 $URI/ext/$ENDPOINT \
| $FORMAT

